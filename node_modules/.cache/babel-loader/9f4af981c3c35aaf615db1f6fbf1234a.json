{"ast":null,"code":"/**\n * @fileoverview gRPC-Web generated client stub for echo\n * @enhanceable\n * @public\n */ // GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */ //@ts-nocheck\nvar grpc={};grpc.web=require('grpc-web');var proto={};proto.echo=require('./echo_pb.js');/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */proto.echo.EchoServiceClient=function(hostname,credentials,options){if(!options)options={};options['format']='text';/**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */this.client_=new grpc.web.GrpcWebClientBase(options);/**\n   * @private @const {string} The hostname\n   */this.hostname_=hostname;/**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */this.credentials_=credentials;/**\n   * @private @const {?Object} Options for the client\n   */this.options_=options;};/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */proto.echo.EchoServicePromiseClient=function(hostname,credentials,options){if(!options)options={};options['format']='text';/**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */this.client_=new grpc.web.GrpcWebClientBase(options);/**\n   * @private @const {string} The hostname\n   */this.hostname_=hostname;/**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */this.credentials_=credentials;/**\n   * @private @const {?Object} Options for the client\n   */this.options_=options;};/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */var methodDescriptor_EchoService_Echo=new grpc.web.MethodDescriptor('/echo.EchoService/Echo',grpc.web.MethodType.UNARY,proto.echo.EchoRequest,proto.echo.EchoResponse,/** @param {!proto.echo.EchoRequest} request */function(request){return request.serializeBinary();},proto.echo.EchoResponse.deserializeBinary);/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */var methodInfo_EchoService_Echo=new grpc.web.AbstractClientBase.MethodInfo(proto.echo.EchoResponse,/** @param {!proto.echo.EchoRequest} request */function(request){return request.serializeBinary();},proto.echo.EchoResponse.deserializeBinary);/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.echo.EchoResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.echo.EchoResponse>|undefined}\n *     The XHR Node Readable Stream\n */proto.echo.EchoServiceClient.prototype.echo=function(request,metadata,callback){return this.client_.rpcCall(this.hostname_+'/echo.EchoService/Echo',request,metadata||{},methodDescriptor_EchoService_Echo,callback);};/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.echo.EchoResponse>}\n *     A native promise that resolves to the response\n */proto.echo.EchoServicePromiseClient.prototype.echo=function(request,metadata){return this.client_.unaryCall(this.hostname_+'/echo.EchoService/Echo',request,metadata||{},methodDescriptor_EchoService_Echo);};module.exports=proto.echo;","map":{"version":3,"sources":["/home/tom/Code/client-test/src/generated/src/echo_grpc_web_pb.js"],"names":["grpc","web","require","proto","echo","EchoServiceClient","hostname","credentials","options","client_","GrpcWebClientBase","hostname_","credentials_","options_","EchoServicePromiseClient","methodDescriptor_EchoService_Echo","MethodDescriptor","MethodType","UNARY","EchoRequest","EchoResponse","request","serializeBinary","deserializeBinary","methodInfo_EchoService_Echo","AbstractClientBase","MethodInfo","prototype","metadata","callback","rpcCall","unaryCall","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for echo\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n//@ts-nocheck\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = {};\nproto.echo = require('./echo_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.echo.EchoServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.echo.EchoServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */\nconst methodDescriptor_EchoService_Echo = new grpc.web.MethodDescriptor(\n  '/echo.EchoService/Echo',\n  grpc.web.MethodType.UNARY,\n  proto.echo.EchoRequest,\n  proto.echo.EchoResponse,\n  /** @param {!proto.echo.EchoRequest} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.echo.EchoResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */\nconst methodInfo_EchoService_Echo = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.echo.EchoResponse,\n  /** @param {!proto.echo.EchoRequest} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.echo.EchoResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.echo.EchoResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.echo.EchoResponse>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.echo.EchoServiceClient.prototype.echo =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/echo.EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo,\n      callback);\n};\n\n\n/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.echo.EchoResponse>}\n *     A native promise that resolves to the response\n */\nproto.echo.EchoServicePromiseClient.prototype.echo =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/echo.EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo);\n};\n\n\nmodule.exports = proto.echo;\n\n"]},"metadata":{},"sourceType":"module"}