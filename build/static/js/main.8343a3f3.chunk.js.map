{"version":3,"sources":["generated/src/echo_pb.js","ui/components/Cell.js","ui/components/Grid.js","service/EchoService.js","App.js","serviceWorker.js","index.js","generated/src/echo_grpc_web_pb.js"],"names":["jspb","require","goog","global","Function","exportSymbol","proto","echo","EchoRequest","opt_data","Message","initialize","this","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","message","getFieldWithDefault","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readString","setMessage","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","f","getMessage","length","writeString","setProto3StringField","EchoResponse","object","extend","exports","Cell","props","type","className","map","n","toFixed","Grid","array","cells","cell","client","EchoServiceClient","a","request","console","log","err","response","on","status","echoServiceEndpointRPC","then","catch","Square","squares","key","App","i","Math","random","square","push","state","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","grpc","web","credentials","options","client_","GrpcWebClientBase","hostname_","credentials_","options_","EchoServicePromiseClient","methodDescriptor_EchoService_Echo","MethodDescriptor","MethodType","UNARY","AbstractClientBase","MethodInfo","metadata","callback","rpcCall","unaryCall","module"],"mappings":"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","file":"static/js/main.8343a3f3.chunk.js","sourcesContent":["/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n//@ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.echo.EchoRequest', null, global);\ngoog.exportSymbol('proto.echo.EchoResponse', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.echo.EchoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.echo.EchoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.echo.EchoRequest.displayName = 'proto.echo.EchoRequest';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.echo.EchoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.echo.EchoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.echo.EchoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.echo.EchoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.echo.EchoRequest}\n */\nproto.echo.EchoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.echo.EchoRequest;\n  return proto.echo.EchoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.echo.EchoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.echo.EchoRequest}\n */\nproto.echo.EchoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.echo.EchoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.echo.EchoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.echo.EchoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.echo.EchoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.echo.EchoRequest.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.echo.EchoRequest.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.echo.EchoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.echo.EchoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.echo.EchoResponse.displayName = 'proto.echo.EchoResponse';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.echo.EchoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.echo.EchoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.echo.EchoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.echo.EchoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    message: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.echo.EchoResponse}\n */\nproto.echo.EchoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.echo.EchoResponse;\n  return proto.echo.EchoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.echo.EchoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.echo.EchoResponse}\n */\nproto.echo.EchoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.echo.EchoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.echo.EchoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.echo.EchoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.echo.EchoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string message = 1;\n * @return {string}\n */\nproto.echo.EchoResponse.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.echo.EchoResponse.prototype.setMessage = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.echo);\n","import React from 'react'\nimport './Cell.css'\n\nfunction Cell(props) {\n  const { type } = props\n    \n  return (\n    <div className=\"Cell\">\n      {type}\n    </div>\n  )\n  \n}\n\nexport default Cell","import React from 'react'\nimport Cell from './Cell'\nimport './Grid.css'\n\nconst numbers = [11,33,55,66]\nconst prices = numbers.map((n) => `$${n.toFixed(2)}`)\n// ['$11.00', '$33.00', ...]\n\nfunction Grid(props) {\n  const { cells } = props\n\n  const array = cells.map((cell) => <Cell type={cell.type} />)\n\n  return (\n    <div className=\"Grid\">\n      {array}\n    </div>\n  )\n}\n\nexport default Grid","/*eslint-disabled */\n//@ts-nocheck\nimport { promisify } from 'util';\nimport {EchoServiceClient} from '../generated/src/echo_grpc_web_pb';\nimport {EchoRequest, EchoResponse} from '../generated/src/echo_pb'\n\nconst client = new EchoServiceClient('http://edge.gloofoo.xyz', null, null);\n\nexport async function echoServiceEndpointRPC() {\n    const request = new EchoRequest();\n    request.setMessage(\"Testing the echo rpc!\");\n    console.log('here')\n\n    const call = client.echo(request, {'custom-header-1': 'value1'},\n  (err, response) => {\n      console.log(err)\n    console.log(response.getMessage());\n  });\ncall.on('status', (status) => {\n  // ...\n});\n    \n    \n    console.log('yeet')\n    return \n}\n\n// const client = new EchoServiceClient('localhost:8080');\n// const request = new EchoRequest();\n\n\n// request.setMessage('Hello World!');\n    \n// const metadata = {'custom-header-1': 'value1'};\n    \n// client.Echo(request, metadata, (err, response) => {\n//     console.log(\"Testing\")\n// });\n \n// const echoapp = new App();\n// const response = await echoapp.Echo(\"Yo\")\n// response.getMessage()\n\n// module.exports = {\n//     echoServiceEndpointRPC\n// }","import React, { Component } from 'react';\nimport Grid from './ui/components/Grid';\nimport './App.css';\n\nimport { echoServiceEndpointRPC } from './service/EchoService.js';\n\nlet output = echoServiceEndpointRPC().then(()=>{}).catch(()=>{})\n\nclass Square {\n  squares = 0;\n  constructor(type) {\n    Square.squares += 1;\n    this.key = Square.squares\n    this.type = type\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    const cells = []\n\n    for (let i = 0; i < 100; i += 1) {\n      const type = Math.random() < 0.8 ? 0 : 1\n      const square = new Square(type)\n      cells.push(square)\n    }\n\n    this.state = {\n      cells\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* add exported function? */}\n        <Grid cells={this.state.cells} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * @fileoverview gRPC-Web generated client stub for echo\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n//@ts-nocheck\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = {};\nproto.echo = require('./echo_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.echo.EchoServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.echo.EchoServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */\nconst methodDescriptor_EchoService_Echo = new grpc.web.MethodDescriptor(\n  '/echo.EchoService/Echo',\n  grpc.web.MethodType.UNARY,\n  proto.echo.EchoRequest,\n  proto.echo.EchoResponse,\n  /** @param {!proto.echo.EchoRequest} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.echo.EchoResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.echo.EchoRequest,\n *   !proto.echo.EchoResponse>}\n */\nconst methodInfo_EchoService_Echo = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.echo.EchoResponse,\n  /** @param {!proto.echo.EchoRequest} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.echo.EchoResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.echo.EchoResponse)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.echo.EchoResponse>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.echo.EchoServiceClient.prototype.echo =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/echo.EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo,\n      callback);\n};\n\n\n/**\n * @param {!proto.echo.EchoRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.echo.EchoResponse>}\n *     A native promise that resolves to the response\n */\nproto.echo.EchoServicePromiseClient.prototype.echo =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/echo.EchoService/Echo',\n      request,\n      metadata || {},\n      methodDescriptor_EchoService_Echo);\n};\n\n\nmodule.exports = proto.echo;\n\n"],"sourceRoot":""}